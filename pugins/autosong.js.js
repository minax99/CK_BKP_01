const { cmd, commands } = require('../command');
const yts = require('yt-search');
const { fetchJson } = require('../lib/functions');
const ddownr = require('denethdev-ytmp3');

// Function to extract the video ID from youtu.be or YouTube links
function extractYouTubeId(url) {
    const regex = /(?:https?:\/\/)?(?:www\.)?(?:youtube\.com\/(?:watch\?v=|embed\/|v\/|shorts\/|playlist\?list=)|youtu\.be\/)([a-zA-Z0-9_-]{11})/;
    const match = url.match(regex);
    return match ? match[1] : null;
}

// Function to convert any YouTube URL to a full YouTube watch URL
function convertYouTubeLink(q) {
    const videoId = extractYouTubeId(q);
    if (videoId) {
        return `https://www.youtube.com/watch?v=${videoId}`;
    }
    return q;
}

// Function to get a random Sinhala song
async function getRandomSong() {
    const sinhalaKeywords = ['Desawana Music', 'SGM Tunes', 'DILU Beats song', 'Kovizz Audio'];
    const randomKeyword = sinhalaKeywords[Math.floor(Math.random() * sinhalaKeywords.length)];
    const search = await yts(randomKeyword);
    const videos = search.videos;
    return videos[Math.floor(Math.random() * videos.length)]; // Select a random song
}

cmd({
    pattern: "song",
    alias: "play",
    desc: "‡∂ú‡∑ì‡∂≠ ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∑É‡∂≥‡∑Ñ‡∑è.",
    react: "üéµ",
    category: "‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏",
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        q = convertYouTubeLink(q);
        if (!q) return reply("*`YT_URL ‡∑Ñ‡∑ù ‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä ‡∂Ö‡∑Ä‡∑Å‡∑ä‚Äç‡∂∫`*");

        reply("*_üéµ ‡∂ú‡∑ì‡∂≠ ‡∑Ñ‡∂∏‡∑î‡∑Ä‡∑ñ ‡∂Ö‡∂≠‡∂ª, ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏ ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑ô‡∂∏‡∑í‡∂±‡∑ä ‡∂¥‡∑Ä‡∂≠‡∑ì..._*");
        const search = await yts(q);
        if (!search.videos || search.videos.length === 0) {
            return reply("‚ùå \"" + q + "\" ‡∑É‡∂≥‡∑Ñ‡∑è ‡∂¥‡∑ä‚Äç‡∂ª‡∂≠‡∑í‡∂µ‡∂Ω ‡∂±‡∑ú‡∂∏‡∑ê‡∂≠.");
        }

        const data = search.videos[0];
        const url = data.url;

        let desc = `
‚îè„Äå‚ú®ùêäùêÄùêïùêà ùêåùêÉ ùêÄùêîùêÉùêàùêé‚ú®„Äç
‚îÉ üë®‚ÄçüíªOwner: ·¥ã·¥Ä·¥†…™·¥Ö·¥ú  Ä·¥ÄÍú±·¥Ä…¥…¢·¥Ä
‚îÉ ü§ñ Bot Name: ùêäùêÄùêïùêà - ùêåùêÉ
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅñ£îñ£î
‚îè‚îÅ‚ùÆ üíúùêÉùêÑùêìùêÄùêãùêÑùêíüíú ‚ùØ‚îÅ
‚îÉü§ñ *‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä:* ${data.title}
‚îÉüìë *‡∂ö‡∑è‡∂Ω‡∂∫:* ${data.timestamp}
‚îÉüîñ *‡∂∂‡∑ê‡∂Ω‡∑ì‡∂∏‡∑ä:* ${data.views}
‚îÉüìü *‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∂ö‡∑Ö ‡∂Ø‡∑í‡∂±:* ${data.ago}
‚îÉüë®‚Äçüíª Owner: ·¥ã·¥Ä·¥†…™·¥Ö·¥ú  Ä·¥ÄÍú±·¥Ä…¥…¢·¥Ä
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅñ£îñ£î
‚ï≠‚îÅ‚îÅ„Äîüî¢ *‡∂¥‡∑í‡∑Ö‡∑í‡∂≠‡∑î‡∂ª‡∑î ‡∂Ö‡∂Ç‡∂ö‡∂∫*„Äï‚îÅ‚îÅ‚îà‚ä∑
‚îÉ‚óà‚ï≠‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ¬∑‡πè
‚îÉ‚óà‚îÉ‚Ä¢1 | ‡∂î‡∑É‡∑ä‡∑É‡∑ö ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂± üéß
‚îÉ‚óà‚îÉ‚Ä¢2 | ‡∂Ω‡∑í‡∂¥‡∑í‡∂ú‡∑ú‡∂±‡∑î‡∑Ä ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂± üìÅ
‚îÉ‚óà‚îÉ‚Ä¢3 | ‡∑Ñ‡∂¨ ‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∂ª‡∂±‡∑ä‡∂± üé§
‚îÉ‚óà‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
‚ï∞‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îà‚ä∑
> *·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è  ·¥ã·¥Ä·¥†…™·¥Ö·¥ú  Ä·¥ÄÍú±·¥Ä…¥…¢·¥Ä : )*
`;
        let info = `
> *·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è  ·¥ã·¥Ä·¥†…™·¥Ö·¥ú  Ä·¥ÄÍú±·¥Ä…¥…¢·¥Ä : )*
`;

        const sentMsg = await conn.sendMessage(from, {
            image: { url: data.thumbnail },
            caption: desc,
            contextInfo: {
                mentionedJid: ['94762858448@s.whatsapp.net'],
                groupMentions: [],
                forwardingScore: 1,
                isForwarded: true,
                forwardedNewsletterMessageInfo: {
                    newsletterJid: '120363417070951702@newsletter',
                    newsletterName: "üé¨ùêåùêéùêïùêàùêÑ ùêÇùêàùêëùêÇùêãùêÑüé¨",
                    serverMessageId: 999
                }
            }
        }, { quoted: mek });

        const messageID = sentMsg.key.id;

        conn.ev.on('messages.upsert', async (messageUpdate) => {
            const mek = messageUpdate.messages[0];
            if (!mek.message) return;
            const messageType = mek.message.conversation || mek.message.extendedTextMessage?.text;
            const from = mek.key.remoteJid;
            const sender = mek.key.participant || mek.key.remoteJid;

            const isReplyToSentMsg = mek.message.extendedTextMessage && mek.message.extendedTextMessage.contextInfo.stanzaId === messageID;

            if (isReplyToSentMsg) {
                if (messageType === '1' || messageType === '2' || messageType === '3') {
                    await conn.sendMessage(from, { react: { text: '‚¨áÔ∏è', key: mek.key } });

                    const result = await ddownr.download(url, 'mp3'); // Download in mp3 format
                    const downloadLink = result.downloadUrl;

                    if (messageType === '1') { // Audio
                        await conn.sendMessage(from, {
                            audio: { url: downloadLink },
                            mimetype: "audio/mpeg",
                            contextInfo: {
                                externalAdReply: {
                                    title: data.title,
                                    body: data.videoId,
                                    mediaType: 1,
                                    sourceUrl: data.url,
                                    thumbnailUrl: data.thumbnail,
                                    renderLargerThumbnail: true,
                                    showAdAttribution: true
                                }
                            }
                        }, { quoted: mek });
                    } else if (messageType === '2') { // Document
                        await conn.sendMessage(from, {
                            document: { url: downloadLink },
                            mimetype: "audio/mp3",
                            fileName: `${data.title}.mp3`,
                            caption: info
                        }, { quoted: mek });
                    } else if (messageType === '3') { // Voice
                        await conn.sendMessage(from, {
                            audio: { url: downloadLink },
                            mimetype: "audio/mpeg",
                            ptt: true,
                            contextInfo: {
                                externalAdReply: {
                                    title: data.title,
                                    body: data.videoId,
                                    mediaType: 1,
                                    sourceUrl: data.url,
                                    thumbnailUrl: data.thumbnail,
                                    renderLargerThumbnail: true,
                                    showAdAttribution: true
                                }
                            }
                        }, { quoted: mek });
                    }

                    await conn.sendMessage(from, { react: { text: '‚¨ÜÔ∏è', key: mek.key } });
                }
            }
        });
    } catch (e) {
        console.log(e);
        reply("‚ùå ‡∂î‡∂∂‡∂ú‡∑ö ‡∂â‡∂Ω‡∑ä‡∂Ω‡∑ì‡∂∏ ‡∂¥‡∂ª‡∑í‡∂†‡∑è‡∂Ω‡∂±‡∂∫ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏‡∑ö‡∂Ø‡∑ì ‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä ‡∂á‡∂≠‡∑í ‡∑Ä‡∑í‡∂∫.");
    }
});

// Auto Song Command for JID
cmd({
    pattern: "startsong",
    alias: "autosong",
    desc: "JID ‡∂ë‡∂ö‡∂ö‡∂ß ‡∑É‡∑ë‡∂∏ 15 ‡∑Ä‡∑í‡∂±‡∑è‡∂©‡∑í 1‡∂ö‡∂ß ‡∑Ä‡∂ª‡∂ö‡∑ä ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂ú‡∑ì‡∂≠ ‡∑É‡∑ä‡∑Ä‡∂∫‡∂Ç‡∂ö‡∑ä‚Äç‡∂ª‡∑ì‡∂∫‡∑Ä ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏.",
    category: "‡∂∂‡∑è‡∂ú‡∂≠ ‡∂ö‡∑í‡∂ª‡∑ì‡∂∏",
    filename: __filename
},
async (conn, mek, m, { from, quoted, body, isCmd, command, args, q, isGroup, sender, senderNumber, botNumber2, botNumber, pushname, isMe, isOwner, groupMetadata, groupName, participants, groupAdmins, isBotAdmins, isAdmins, reply }) => {
    try {
        if (!isOwner) return reply("*`‡∂∏‡∑ô‡∂∏ ‡∑Ä‡∑í‡∂∞‡∑è‡∂±‡∂∫ ‡∑Ñ‡∑í‡∂∏‡∑í‡∂ö‡∂ª‡∑î‡∂ß ‡∂¥‡∂∏‡∂´‡∂∫‡∑í`*");

        if (!q) return reply("*`JID ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂Ø‡∑ô‡∂±‡∑ä‡∂±, ‡∂ã‡∂Ø‡∑è: .startsong 94727163302@s.whatsapp.net`*");

        const targetJid = q.trim();

        // Check if JID is valid
        if (!targetJid.includes('@s.whatsapp.net') && !targetJid.includes('@g.us')) {
            return reply("*`‡∑Ä‡∂Ω‡∂Ç‡∂ú‡∑î JID ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∑ú‡∑Ä‡∑ö! WhatsApp JID ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂∑‡∑è‡∑Ä‡∑í‡∂≠‡∑è ‡∂ö‡∂ª‡∂±‡∑ä‡∂± (‡∂ã‡∂Ø‡∑è: 94727163302@s.whatsapp.net ‡∑Ñ‡∑ù ‡∂ö‡∂´‡∑ä‡∂©‡∑è‡∂∫‡∂∏‡∑ä ID)`*");
        }

        reply(`‡∑É‡∑ë‡∂∏ 15 ‡∑Ä‡∑í‡∂±‡∑è‡∂©‡∑í 1‡∂ö‡∂ß ‡∑Ä‡∂ª‡∂ö‡∑ä ‡∑É‡∑í‡∂Ç‡∑Ñ‡∂Ω ‡∂ú‡∑ì‡∂≠ ‡∂∫‡∑ê‡∑Ä‡∑ì‡∂∏ ‡∂Ü‡∂ª‡∂∏‡∑ä‡∂∑ ‡∑Ä‡∑ô‡∂±‡∑Ä‡∑è JID ‡∂ë‡∂ö‡∂ß: ${targetJid}! üéµ\n> *·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è  ·¥ã·¥Ä·¥†…™·¥Ö·¥ú  Ä·¥ÄÍú±·¥Ä…¥…¢·¥Ä : )*`);

        // Auto-upload function for JID
        const autoUploadSong = async () => {
            try {
                const data = await getRandomSong();
                const url = data.url;

                let desc = `
‚îè‚îÅ‚ùÆ üíúùêäùêÄùêïùêà ùêåùêÉ ùêíùêéùêçùêÜüíú ‚ùØ‚îÅ
‚îÉü©µ *‡∂∏‡∑è‡∂≠‡∑ò‡∂ö‡∑è‡∑Ä:* ${data.title}
‚îÉü©µ *‡∂ö‡∑è‡∂Ω‡∂∫:* ${data.timestamp}
‚îÉü©µ *‡∂∂‡∑ê‡∂Ω‡∑ì‡∂∏‡∑ä:* ${data.views}
‚îÉü©µ *‡∂ã‡∂©‡∑î‡∂ú‡∂≠ ‡∂ö‡∑Ö ‡∂Ø‡∑í‡∂±:* ${data.ago}
‚îÉü©µ *Owner: ·¥ã·¥Ä·¥†…™·¥Ö·¥ú  Ä·¥ÄÍú±·¥Ä…¥…¢·¥Ä
‚îó‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅñ£îñ£î
*„Äå*üéµ ùêåùêÑùêãùêéùêÉùêò ùêïùêàùêÅùêÑùêí üéµ*„Äç*

> *·¥ò·¥è·¥°·¥á Ä·¥Ö  ô è  ·¥ã·¥Ä·¥†…™·¥Ö·¥ú  Ä·¥ÄÍú±·¥Ä…¥…¢·¥Ä : )*
`;

                await conn.sendMessage(targetJid, {
                    image: { url: data.thumbnail },
                    caption: desc
                });

                const result = await ddownr.download(url, 'mp3');
                const downloadLink = result.downloadUrl;

                await conn.sendMessage(targetJid, {
                    audio: { url: downloadLink },
                    mimetype: "audio/mpeg",
                    contextInfo: {
                        externalAdReply: {
                            title: data.title,
                            body: data.videoId,
                            mediaType: 1,
                            sourceUrl: data.url,
                            thumbnailUrl: data.thumbnail,
                            renderLargerThumbnail: true,
                            showAdAttribution: true
                        }
                    }
                });

                console.log(`Auto-uploaded song to JID: ${data.title} -> ${targetJid}`);
            } catch (e) {
                console.error('Auto-upload error:', e);
            }
        };

        // Start auto-upload every 15 minutes
        setInterval(autoUploadSong, 15 * 60 * 1000); // 15 minutes interval

    } catch (e) {
        console.log(e);
        reply(`‡∂Ø‡∑ù‡∑Ç‡∂∫‡∂ö‡∑ä: ${e}`);
    }
});
